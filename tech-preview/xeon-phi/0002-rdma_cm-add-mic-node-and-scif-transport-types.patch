From faf3b3f931806d4f044068c4e9b2ca4482a9177a Mon Sep 17 00:00:00 2001
From: Phil Cayton <phil.cayton@intel.com>
Date: Tue, 3 Jun 2014 09:50:57 -0700
Subject: [PATCH 02/12] rdma_cm add mic node and scif transport types

The OFED SCIF driver can leverage the iWARP cm calls to establish connections.
This patch utilizes the new node and transport types in the rdma cm to call
the underlying driver as needed.
---
diff -urN a1/drivers/infiniband/core/cma.c a2/drivers/infiniband/core/cma.c
--- a1/drivers/infiniband/core/cma.c	2015-01-05 13:46:27.953660271 -0800
+++ a2/drivers/infiniband/core/cma.c	2015-01-05 14:05:11.897612926 -0800
@@ -747,6 +747,7 @@
 			qp_attr->rq_psn = id_priv->seq_num;
 		break;
 	case RDMA_TRANSPORT_IWARP:
+	case RDMA_TRANSPORT_SCIF:
 		if (!id_priv->cm_id.iw) {
 			qp_attr->qp_access_flags = 0;
 			*qp_attr_mask = IB_QP_STATE | IB_QP_ACCESS_FLAGS;
@@ -1043,6 +1044,7 @@
 				ib_destroy_cm_id(id_priv->cm_id.ib);
 			break;
 		case RDMA_TRANSPORT_IWARP:
+		case RDMA_TRANSPORT_SCIF:
 			if (id_priv->cm_id.iw)
 				iw_destroy_cm_id(id_priv->cm_id.iw);
 			break;
@@ -1994,6 +1996,7 @@
 		}
 		break;
 	case RDMA_TRANSPORT_IWARP:
+	case RDMA_TRANSPORT_SCIF:
 		ret = cma_resolve_iw_route(id_priv, timeout_ms);
 		break;
 	default:
@@ -2184,6 +2187,25 @@
 	return ret;
 }
 
+static int cma_resolve_scif(struct rdma_id_private *id_priv)
+{
+	struct cma_work *work;
+
+	work = kzalloc(sizeof *work, GFP_KERNEL);
+	if (!work)
+		return -ENOMEM;
+
+	/* we probably can leave it empty here */
+
+	work->id = id_priv;
+	INIT_WORK(&work->work, cma_work_handler);
+	work->old_state = RDMA_CM_ADDR_QUERY;
+	work->new_state = RDMA_CM_ADDR_RESOLVED;
+	work->event.event = RDMA_CM_EVENT_ADDR_RESOLVED;
+	queue_work(cma_wq, &work->work);
+	return 0;
+}
+
 static int cma_bind_addr(struct rdma_cm_id *id, struct sockaddr *src_addr,
 			 struct sockaddr *dst_addr)
 {
@@ -2225,9 +2247,12 @@
 	if (cma_any_addr(dst_addr)) {
 		ret = cma_resolve_loopback(id_priv);
 	} else {
-		if (dst_addr->sa_family == AF_IB) {
+		if (dst_addr->sa_family == AF_IB)
 			ret = cma_resolve_ib_addr(id_priv);
-		} else {
+		else if ((id_priv->id.device != NULL) &&
+			 (rdma_node_get_transport(id_priv->id.device->node_type) == RDMA_TRANSPORT_SCIF))
+			ret = cma_resolve_scif(id_priv);
+		else {
 			ret = rdma_resolve_ip(&addr_client, cma_src_addr(id_priv),
 					      dst_addr, &id->route.addr.dev_addr,
 					      timeout_ms, addr_handler, id_priv);
@@ -2598,6 +2623,7 @@
 				goto err;
 			break;
 		case RDMA_TRANSPORT_IWARP:
+		case RDMA_TRANSPORT_SCIF:
 			ret = cma_iw_listen(id_priv, backlog);
 			if (ret)
 				goto err;
@@ -2946,6 +2972,7 @@
 			ret = cma_connect_ib(id_priv, conn_param);
 		break;
 	case RDMA_TRANSPORT_IWARP:
+	case RDMA_TRANSPORT_SCIF:
 		ret = cma_connect_iw(id_priv, conn_param);
 		break;
 	default:
@@ -3073,6 +3100,7 @@
 		}
 		break;
 	case RDMA_TRANSPORT_IWARP:
+	case RDMA_TRANSPORT_SCIF:
 		ret = cma_accept_iw(id_priv, conn_param);
 		break;
 	default:
@@ -3133,6 +3161,7 @@
 					     0, private_data, private_data_len);
 		break;
 	case RDMA_TRANSPORT_IWARP:
+	case RDMA_TRANSPORT_SCIF:
 		ret = iw_cm_reject(id_priv->cm_id.iw,
 				   private_data, private_data_len);
 		break;
@@ -3163,6 +3192,7 @@
 			ib_send_cm_drep(id_priv->cm_id.ib, NULL, 0);
 		break;
 	case RDMA_TRANSPORT_IWARP:
+	case RDMA_TRANSPORT_SCIF:
 		ret = iw_cm_disconnect(id_priv->cm_id.iw, 0);
 		break;
 	default:
