From 8e3cff460efe00954b4c99ea23e42527c234c3f9 Mon Sep 17 00:00:00 2001
From: Phil Cayton <phil.cayton@intel.com>
Date: Tue, 4 Feb 2014 12:22:38 -0800
Subject: [PATCH 05/12] allow mic ipoib qp creation

From the host point of view, each MIC kernel appears as a "user-mode process"
to allow address translation to access the correct coprocessor mapped across
PCI.  To enable the IPoIB driver in MIC kernel, some QP creation flags must
be checked regardless of whether the call originates from kernel or user
space.  Because these create_flags cannot be set by normal user-mode calls
through ib_uverbs, moving the check is not an issue.  This patch allows the
IPoIB driver on MIC to create QPs correctly.
---
 drivers/infiniband/hw/mlx4/qp.c | 16 ++++++++++------
 drivers/infiniband/hw/mlx5/qp.c |  5 +++--
 2 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/drivers/infiniband/hw/mlx4/qp.c b/drivers/infiniband/hw/mlx4/qp.c
index 4f10af2..1b3ef87 100644
--- a/drivers/infiniband/hw/mlx4/qp.c
+++ b/drivers/infiniband/hw/mlx4/qp.c
@@ -657,6 +657,12 @@ static int create_qp_common(struct mlx4_ib_dev *dev, struct ib_pd *pd,
 
 	qp->mlx4_ib_qp_type = qp_type;
 
+	if (init_attr->create_flags & IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK)
+		qp->flags |= MLX4_IB_QP_BLOCK_MULTICAST_LOOPBACK;
+
+	if (init_attr->create_flags & IB_QP_CREATE_IPOIB_UD_LSO)
+		qp->flags |= MLX4_IB_QP_LSO;
+
 	mutex_init(&qp->mutex);
 	spin_lock_init(&qp->sq.lock);
 	spin_lock_init(&qp->rq.lock);
@@ -710,12 +716,6 @@ static int create_qp_common(struct mlx4_ib_dev *dev, struct ib_pd *pd,
 	} else {
 		qp->sq_no_prefetch = 0;
 
-		if (init_attr->create_flags & IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK)
-			qp->flags |= MLX4_IB_QP_BLOCK_MULTICAST_LOOPBACK;
-
-		if (init_attr->create_flags & IB_QP_CREATE_IPOIB_UD_LSO)
-			qp->flags |= MLX4_IB_QP_LSO;
-
 		err = set_kernel_sq_size(dev, &init_attr->cap, qp_type, qp);
 		if (err)
 			goto err;
@@ -981,6 +981,7 @@ struct ib_qp *mlx4_ib_create_qp(struct ib_pd *pd,
 	int err;
 	u16 xrcdn = 0;
 
+#if 0 /* Removed to allow Xeon Phi's use of ib_ipoib via CCL-Direct (ibp) */
 	/*
 	 * We only support LSO, vendor flag1, and multicast loopback blocking,
 	 * and only for kernel UD QPs.
@@ -997,6 +998,7 @@ struct ib_qp *mlx4_ib_create_qp(struct ib_pd *pd,
 	     ((init_attr->create_flags & MLX4_IB_SRIOV_SQP) &&
 	      init_attr->qp_type > IB_QPT_GSI)))
 		return ERR_PTR(-EINVAL);
+#endif /* if 0 */
 
 	switch (init_attr->qp_type) {
 	case IB_QPT_XRC_TGT:
@@ -1031,9 +1033,11 @@ struct ib_qp *mlx4_ib_create_qp(struct ib_pd *pd,
 	case IB_QPT_SMI:
 	case IB_QPT_GSI:
 	{
+#if 0 /* Removed to allow Xeon Phi's use of ib_ipoib via CCL-Direct (ibp) */
 		/* Userspace is not allowed to create special QPs: */
 		if (udata)
 			return ERR_PTR(-EINVAL);
+#endif /* if 0 */
 
 		err = create_qp_common(to_mdev(pd->device), pd, init_attr, udata,
 				       get_sqp_num(to_mdev(pd->device), init_attr),
diff --git a/drivers/infiniband/hw/mlx5/qp.c b/drivers/infiniband/hw/mlx5/qp.c
index 5659ea8..dfb534b 100644
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@ -609,8 +609,6 @@ static int create_kernel_qp(struct mlx5_ib_dev *dev,
 	int err;
 
 	uuari = &dev->mdev.priv.uuari;
-	if (init_attr->create_flags & IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK)
-		qp->flags |= MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK;
 
 	if (init_attr->qp_type == MLX5_IB_QPT_REG_UMR)
 		lc = MLX5_IB_LATENCY_CLASS_FAST_PATH;
@@ -768,6 +766,9 @@ static int create_qp_common(struct mlx5_ib_dev *dev, struct ib_pd *pd,
 	}
 
 	if (pd) {
+		if (init_attr->create_flags & IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK)
+			qp->flags |= MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK;
+
 		if (pd->uobject) {
 			mlx5_ib_dbg(dev, "requested sq_wqe_count (%d)\n", ucmd.sq_wqe_count);
 			if (ucmd.rq_wqe_shift != qp->rq.wqe_shift ||
-- 
1.8.3.1

