xeon-phi: add context based udata support

Normally the copy_to_user and copy_from_user calls are used to access vendor
private data when allocating resources from processes.  However, when the
processes are running on MIC, this communication is proxied to the host kernel
via SCIF.  This patch allows setup of context-based udata access routines.
---
diff -ruN a2/drivers/infiniband/core/uverbs_cmd.c a3/drivers/infiniband/core/uverbs_cmd.c
--- a2/drivers/infiniband/core/uverbs_cmd.c	2015-09-10 09:31:23.790958256 -0700
+++ a3/drivers/infiniband/core/uverbs_cmd.c	2015-09-10 09:32:01.419900874 -0700
@@ -57,6 +57,21 @@
 static struct uverbs_lock_class xrcd_lock_class = { .name = "XRCD-uobj" };
 static struct uverbs_lock_class rule_lock_class = { .name = "RULE-uobj" };
 
+static int uverbs_copy_from_udata(void *dst, struct ib_udata *udata, size_t len)
+{
+	return copy_from_user(dst, udata->inbuf, len) ? -EFAULT : 0;
+}
+
+static int uverbs_copy_to_udata(struct ib_udata *udata, void *src, size_t len)
+{
+	return copy_to_user(udata->outbuf, src, len) ? -EFAULT : 0;
+}
+
+struct ib_udata_ops uverbs_copy = {
+	.copy_from = uverbs_copy_from_udata,
+	.copy_to = uverbs_copy_to_udata
+};
+
 /*
  * The ib_uobject locking scheme is as follows:
  *
@@ -330,6 +345,7 @@
 		goto err;
 	}
 
+	ucontext->umem_ops = NULL;
 	ucontext->device = ibdev;
 	INIT_LIST_HEAD(&ucontext->pd_list);
 	INIT_LIST_HEAD(&ucontext->mr_list);
diff -ruN a2/drivers/infiniband/core/uverbs.h a3/drivers/infiniband/core/uverbs.h
--- a2/drivers/infiniband/core/uverbs.h	2015-09-10 09:31:23.788958210 -0700
+++ a3/drivers/infiniband/core/uverbs.h	2015-09-10 09:32:01.420901195 -0700
@@ -47,8 +47,11 @@
 #include <rdma/ib_umem.h>
 #include <rdma/ib_user_verbs.h>
 
+extern struct ib_udata_ops uverbs_copy;
+
 #define INIT_UDATA(udata, ibuf, obuf, ilen, olen)			\
 	do {								\
+		(udata)->ops	= &uverbs_copy;				\
 		(udata)->inbuf  = (const void __user *) (ibuf);		\
 		(udata)->outbuf = (void __user *) (obuf);		\
 		(udata)->inlen  = (ilen);				\
@@ -57,6 +60,7 @@
 
 #define INIT_UDATA_BUF_OR_NULL(udata, ibuf, obuf, ilen, olen)			\
 	do {									\
+		(udata)->ops	= &uverbs_copy;					\
 		(udata)->inbuf  = (ilen) ? (const void __user *) (ibuf) : NULL;	\
 		(udata)->outbuf = (olen) ? (void __user *) (obuf) : NULL;	\
 		(udata)->inlen  = (ilen);					\
diff -ruN a2/include/rdma/ib_verbs.h a3/include/rdma/ib_verbs.h
--- a2/include/rdma/ib_verbs.h	2015-09-10 09:31:23.754932456 -0700
+++ a3/include/rdma/ib_verbs.h	2015-09-10 09:32:01.420901195 -0700
@@ -1147,7 +1147,14 @@
 	int			live;
 };
 
+struct ib_udata;
+struct ib_udata_ops {
+	int	(*copy_from)(void *dest, struct ib_udata *udata, size_t len);
+	int	(*copy_to)(struct ib_udata *udata, void *src, size_t len);
+};
+
 struct ib_udata {
+	struct ib_udata_ops	*ops;
 	const void __user *inbuf;
 	void __user *outbuf;
 	size_t       inlen;
@@ -1664,12 +1671,12 @@
 
 static inline int ib_copy_from_udata(void *dest, struct ib_udata *udata, size_t len)
 {
-	return copy_from_user(dest, udata->inbuf, len) ? -EFAULT : 0;
+	return udata->ops->copy_from(dest, udata, len);
 }
 
 static inline int ib_copy_to_udata(struct ib_udata *udata, void *src, size_t len)
 {
-	return copy_to_user(udata->outbuf, src, len) ? -EFAULT : 0;
+	return udata->ops->copy_to(udata, src, len);
 }
 
 /**
