From: Vladimir Sokolovsky <vlad@mellanox.com>
Subject: [PATCH] BACKPORT: ipoib

Signed-off-by: Vladimir Sokolovsky <vlad@mellanox.com>
---
 drivers/infiniband/ulp/ipoib/ipoib_main.c    | 117 ++++++++++++++++++++++++++-
 drivers/infiniband/ulp/ipoib/ipoib_netlink.c |  31 ++++++-
 2 files changed, 144 insertions(+), 4 deletions(-)

diff --git a/drivers/infiniband/ulp/ipoib/ipoib_main.c b/drivers/infiniband/ulp/ipoib/ipoib_main.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/infiniband/ulp/ipoib/ipoib_main.c
+++ b/drivers/infiniband/ulp/ipoib/ipoib_main.c
@@ -112,8 +112,12 @@ static struct ib_client ipoib_client = {
 static int ipoib_netdev_event(struct notifier_block *this,
 			      unsigned long event, void *ptr)
 {
+#ifdef HAVE_NETDEV_NOTIFIER_INFO
 	struct netdev_notifier_info *ni = ptr;
 	struct net_device *dev = ni->dev;
+#else
+	struct net_device *dev = ptr;
+#endif
 
 	if (dev->netdev_ops->ndo_open != ipoib_open)
 		return NOTIFY_DONE;
@@ -258,14 +262,21 @@ static int ipoib_change_mtu(struct net_device *dev, int new_mtu)
 				"link layer MTU - 4 (%u)\n", priv->mcast_mtu);
 
 	new_mtu = min(priv->mcast_mtu, priv->admin_mtu);
-
+#ifdef HAVE_NDO_CHANGE_MTU_EXTENDED
+	if (priv->rn_ops->extended.ndo_change_mtu) {
+#else
 	if (priv->rn_ops->ndo_change_mtu) {
+#endif
 		bool carrier_status = netif_carrier_ok(dev);
 
 		netif_carrier_off(dev);
 
 		/* notify lower level on the real mtu */
+#ifdef HAVE_NDO_CHANGE_MTU_EXTENDED
+		ret = priv->rn_ops->extended.ndo_change_mtu(dev, new_mtu);
+#else
 		ret = priv->rn_ops->ndo_change_mtu(dev, new_mtu);
+#endif
 
 		if (carrier_status)
 			netif_carrier_on(dev);
@@ -276,15 +287,42 @@ static int ipoib_change_mtu(struct net_device *dev, int new_mtu)
 	return ret;
 }
 
+#ifdef HAVE_NDO_GET_STATS64_RET_VOID
 static void ipoib_get_stats(struct net_device *dev,
 			    struct rtnl_link_stats64 *stats)
+#elif defined(HAVE_NDO_GET_STATS64)
+static struct rtnl_link_stats64 * ipoib_get_stats(struct net_device *dev,
+						  struct rtnl_link_stats64 *stats)
+#else
+static struct net_device_stats *  ipoib_get_stats(struct net_device *dev)
+#endif
 {
 	struct ipoib_dev_priv *priv = ipoib_priv(dev);
 
+#if !defined(HAVE_NDO_GET_STATS64) && !defined(HAVE_NDO_GET_STATS64_RET_VOID)
+	struct net_device_stats *stats = &priv->ret_stats;
+#endif
+#ifdef HAVE_NDO_GET_STATS64_RET_VOID
 	if (priv->rn_ops->ndo_get_stats64)
 		priv->rn_ops->ndo_get_stats64(dev, stats);
 	else
 		netdev_stats_to_stats64(stats, &dev->stats);
+#elif defined(HAVE_NDO_GET_STATS64)
+	if (priv->rn_ops->ndo_get_stats64) {
+		return priv->rn_ops->ndo_get_stats64(dev, stats);
+	} else {
+		netdev_stats_to_stats64(stats,
+					&dev->stats);
+	return stats;
+	}
+#else
+	if (priv->rn_ops->ndo_get_stats) {
+		return priv->rn_ops->ndo_get_stats(dev);
+		} else {
+			memcpy(stats, &dev->stats, sizeof(priv->ret_stats));
+			return stats;
+		}
+#endif
 }
 
 /* Called with an RCU read lock taken */
@@ -303,9 +341,21 @@ static bool ipoib_is_dev_match_addr_rcu(const struct sockaddr *addr,
 		if (!in_dev)
 			return false;
 
+#ifdef HAVE_INET_CONFIRM_ADDR_EXPORTED
+#ifdef HAVE_INET_CONFIRM_ADDR_5_PARAMS
 		ret_addr = inet_confirm_addr(net, in_dev, 0,
 					     addr_in->sin_addr.s_addr,
 					     RT_SCOPE_HOST);
+#else
+		ret_addr = inet_confirm_addr(in_dev, 0,
+					     addr_in->sin_addr.s_addr,
+					     RT_SCOPE_HOST);
+#endif
+#else
+		ret_addr = confirm_addr_indev(in_dev, 0,
+					      addr_in->sin_addr.s_addr,
+					      RT_SCOPE_HOST);
+#endif
 		in_dev_put(in_dev);
 		if (ret_addr)
 			return true;
@@ -350,6 +400,7 @@ struct ipoib_walk_data {
 	struct net_device *result;
 };
 
+#ifdef HAVE_NETDEV_WALK_ALL_UPPER_DEV_RCU
 static int ipoib_upper_walk(struct net_device *upper, void *_data)
 {
 	struct ipoib_walk_data *data = _data;
@@ -363,6 +414,7 @@ static int ipoib_upper_walk(struct net_device *upper, void *_data)
 
 	return ret;
 }
+#endif
 
 /**
  * Find a net_device matching the given address, which is an upper device of
@@ -379,6 +431,9 @@ static struct net_device *ipoib_get_net_dev_match_addr(
 	struct ipoib_walk_data data = {
 		.addr = addr,
 	};
+#ifndef HAVE_NETDEV_WALK_ALL_UPPER_DEV_RCU
+	struct net_device *upper;
+#endif
 
 	rcu_read_lock();
 	if (ipoib_is_dev_match_addr_rcu(addr, dev)) {
@@ -387,7 +442,18 @@ static struct net_device *ipoib_get_net_dev_match_addr(
 		goto out;
 	}
 
+#ifdef HAVE_NETDEV_WALK_ALL_UPPER_DEV_RCU
 	netdev_walk_all_upper_dev_rcu(dev, ipoib_upper_walk, &data);
+#else
+	for_each_netdev(&init_net, upper) {
+                if (ipoib_is_dev_match_addr_rcu(addr, upper)) {
+                        dev_hold(upper);
+                        data.result = upper;
+                        break;
+                }
+        }
+#endif
+
 out:
 	rcu_read_unlock();
 	return data.result;
@@ -707,7 +773,7 @@ static void push_pseudo_header(struct sk_buff *skb, const char *daddr)
 {
 	struct ipoib_pseudo_header *phdr;
 
-	phdr = skb_push(skb, sizeof(*phdr));
+	phdr = (struct ipoib_pseudo_header *)skb_push(skb, sizeof(*phdr));
 	memcpy(phdr->hwaddr, daddr, INFINIBAND_ALEN);
 }
 
@@ -1202,7 +1268,7 @@ static int ipoib_hard_header(struct sk_buff *skb,
 {
 	struct ipoib_header *header;
 
-	header = skb_push(skb, sizeof *header);
+	header = (struct ipoib_header *)skb_push(skb, sizeof *header);
 
 	header->proto = htons(type);
 	header->reserved = 0;
@@ -1868,6 +1934,7 @@ static int ipoib_get_vf_config(struct net_device *dev, int vf,
 	return 0;
 }
 
+#ifdef HAVE_NDO_SET_VF_GUID
 static int ipoib_set_vf_guid(struct net_device *dev, int vf, u64 guid, int type)
 {
 	struct ipoib_dev_priv *priv = ipoib_priv(dev);
@@ -1877,6 +1944,7 @@ static int ipoib_set_vf_guid(struct net_device *dev, int vf, u64 guid, int type)
 
 	return ib_set_vf_guid(priv->ca, vf, priv->port, guid, type);
 }
+#endif
 
 static int ipoib_get_vf_stats(struct net_device *dev, int vf,
 			      struct ifla_vf_stats *vf_stats)
@@ -1894,7 +1962,11 @@ static const struct net_device_ops ipoib_netdev_ops_pf = {
 	.ndo_uninit		 = ipoib_uninit,
 	.ndo_open		 = ipoib_open,
 	.ndo_stop		 = ipoib_stop,
+#ifdef HAVE_NDO_CHANGE_MTU_EXTENDED
+	.extended.ndo_change_mtu = ipoib_change_mtu,
+#else
 	.ndo_change_mtu		 = ipoib_change_mtu,
+#endif
 	.ndo_fix_features	 = ipoib_fix_features,
 	.ndo_start_xmit		 = ipoib_start_xmit,
 	.ndo_tx_timeout		 = ipoib_timeout,
@@ -1903,24 +1975,46 @@ static const struct net_device_ops ipoib_netdev_ops_pf = {
 	.ndo_set_vf_link_state	 = ipoib_set_vf_link_state,
 	.ndo_get_vf_config	 = ipoib_get_vf_config,
 	.ndo_get_vf_stats	 = ipoib_get_vf_stats,
+#ifdef HAVE_NDO_SET_VF_GUID
 	.ndo_set_vf_guid	 = ipoib_set_vf_guid,
+#endif
 	.ndo_set_mac_address	 = ipoib_set_mac,
+#if defined(HAVE_NDO_GET_STATS64) || defined(HAVE_NDO_GET_STATS64_RET_VOID)
 	.ndo_get_stats64	 = ipoib_get_stats,
+#else
+	.ndo_get_stats           = ipoib_get_stats,
+#endif
 	.ndo_do_ioctl		 = ipoib_ioctl,
+#ifdef HAVE_NET_DEVICE_OPS_EXTENDED
+	.ndo_size = sizeof(struct net_device_ops),
+#endif
 };
 
 static const struct net_device_ops ipoib_netdev_ops_vf = {
 	.ndo_uninit		 = ipoib_uninit,
 	.ndo_open		 = ipoib_open,
 	.ndo_stop		 = ipoib_stop,
+#ifdef HAVE_NDO_CHANGE_MTU_RH74
+	.ndo_change_mtu_rh74	 = ipoib_change_mtu,
+#elif defined(HAVE_NDO_CHANGE_MTU_EXTENDED)
+	.extended.ndo_change_mtu = ipoib_change_mtu,
+#else
 	.ndo_change_mtu		 = ipoib_change_mtu,
+#endif
 	.ndo_fix_features	 = ipoib_fix_features,
 	.ndo_start_xmit	 	 = ipoib_start_xmit,
 	.ndo_tx_timeout		 = ipoib_timeout,
 	.ndo_set_rx_mode	 = ipoib_set_mcast_list,
 	.ndo_get_iflink		 = ipoib_get_iflink,
+#if defined(HAVE_NDO_GET_STATS64) || defined(HAVE_NDO_GET_STATS64_RET_VOID)
 	.ndo_get_stats64	 = ipoib_get_stats,
+#else
+	.ndo_get_stats           = ipoib_get_stats,
+#endif
 	.ndo_do_ioctl		 = ipoib_ioctl,
+#ifdef HAVE_NET_DEVICE_OPS_EXTENDED
+	.ndo_size = sizeof(struct net_device_ops),
+#endif
 };
 
 void ipoib_setup_common(struct net_device *dev)
@@ -1985,9 +2079,16 @@ static struct net_device
 	struct net_device *dev;
 	struct rdma_netdev *rn;
 
+#ifdef HAVE_ALLOC_NETDEV_4P
 	dev = alloc_netdev((int)sizeof(struct rdma_netdev),
 			   name,
 			   name_assign_type, setup);
+#else
+	dev = alloc_netdev((int)sizeof(struct rdma_netdev),
+			   name,
+			   setup);
+#endif
+
 	if (!dev)
 		return NULL;
 
@@ -2012,14 +2113,22 @@ static struct net_device *ipoib_get_netdev(struct ib_device *hca, u8 port,
 	if (hca->alloc_rdma_netdev) {
 		dev = hca->alloc_rdma_netdev(hca, port,
 					     RDMA_NETDEV_IPOIB, name,
+#ifdef NET_NAME_UNKNOWN
 					     NET_NAME_UNKNOWN,
+#else
+					     0,		/* NET_NAME_UNKNOWN */
+#endif
 					     ipoib_setup_common);
 		if (IS_ERR_OR_NULL(dev) && PTR_ERR(dev) != -EOPNOTSUPP)
 			return NULL;
 	}
 
 	if (!hca->alloc_rdma_netdev || PTR_ERR(dev) == -EOPNOTSUPP)
+#ifdef NET_NAME_UNKNOWN
 		dev = ipoib_create_netdev_default(hca, name, NET_NAME_UNKNOWN,
+#else
+		dev = ipoib_create_netdev_default(hca, name, 0, /* NET_NAME_UNKNOWN, */
+#endif
 						  ipoib_setup_common);
 
 	return dev;
@@ -2262,7 +2371,9 @@ static struct net_device *ipoib_add_port(const char *format,
 	/* MTU will be reset when mcast join happens */
 	priv->dev->mtu  = IPOIB_UD_MTU(priv->max_ib_mtu);
 	priv->mcast_mtu  = priv->admin_mtu = priv->dev->mtu;
+#ifdef HAVE_NET_DEVICE_MIN_MAX_MTU
 	priv->dev->max_mtu = IPOIB_CM_MTU;
+#endif
 
 	priv->dev->neigh_priv_len = sizeof(struct ipoib_neigh);
 
diff --git a/drivers/infiniband/ulp/ipoib/ipoib_netlink.c b/drivers/infiniband/ulp/ipoib/ipoib_netlink.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/infiniband/ulp/ipoib/ipoib_netlink.c
+++ b/drivers/infiniband/ulp/ipoib/ipoib_netlink.c
@@ -64,9 +64,14 @@ nla_put_failure:
 	return -EMSGSIZE;
 }
 
+#if defined(HAVE_RTNL_LINK_OPS_NEWLINK_5_PARAMS)
 static int ipoib_changelink(struct net_device *dev, struct nlattr *tb[],
 			    struct nlattr *data[],
 			    struct netlink_ext_ack *extack)
+#else
+static int ipoib_changelink(struct net_device *dev, struct nlattr *tb[],
+			    struct nlattr *data[])
+#endif
 {
 	u16 mode, umcast;
 	int ret = 0;
@@ -93,9 +98,17 @@ out_err:
 	return ret;
 }
 
+#if defined(HAVE_RTNL_LINK_OPS_NEWLINK_5_PARAMS)
 static int ipoib_new_child_link(struct net *src_net, struct net_device *dev,
 				struct nlattr *tb[], struct nlattr *data[],
 				struct netlink_ext_ack *extack)
+#elif defined(HAVE_RTNL_LINK_OPS_NEWLINK_4_PARAMS)
+static int ipoib_new_child_link(struct net *src_net, struct net_device *dev,
+				struct nlattr *tb[], struct nlattr *data[])
+#else
+static int ipoib_new_child_link(struct net_device *dev,
+				struct nlattr *tb[], struct nlattr *data[])
+#endif
 {
 	struct net_device *pdev;
 	struct ipoib_dev_priv *ppriv;
@@ -104,8 +117,12 @@ static int ipoib_new_child_link(struct net *src_net, struct net_device *dev,
 
 	if (!tb[IFLA_LINK])
 		return -EINVAL;
-
+#ifdef HAVE_RTNL_LINK_OPS_NEWLINK_4_PARAMS
 	pdev = __dev_get_by_index(src_net, nla_get_u32(tb[IFLA_LINK]));
+#else
+	pdev = __dev_get_by_index(dev_net(dev), nla_get_u32(tb[IFLA_LINK]));
+#endif
+
 	if (!pdev || pdev->type != ARPHRD_INFINIBAND)
 		return -ENODEV;
 
@@ -135,11 +152,19 @@ static int ipoib_new_child_link(struct net *src_net, struct net_device *dev,
 			       child_pkey, IPOIB_RTNL_CHILD);
 
 	if (!err && data)
+#if defined(HAVE_RTNL_LINK_OPS_NEWLINK_5_PARAMS)
 		err = ipoib_changelink(dev, tb, data, extack);
+#else
+		err = ipoib_changelink(dev, tb, data);
+#endif
 	return err;
 }
 
+#ifdef HAVE_RTNL_LINK_OPS_DELLINK_2_PARAMS
 static void ipoib_unregister_child_dev(struct net_device *dev, struct list_head *head)
+#else
+static void ipoib_unregister_child_dev(struct net_device *dev)
+#endif
 {
 	struct ipoib_dev_priv *priv, *ppriv;
 
@@ -147,7 +172,11 @@ static void ipoib_unregister_child_dev(struct net_device *dev, struct list_head
 	ppriv = ipoib_priv(priv->parent);
 
 	down_write(&ppriv->vlan_rwsem);
+#ifdef HAVE_RTNL_LINK_OPS_DELLINK_2_PARAMS
 	unregister_netdevice_queue(dev, head);
+#else
+	unregister_netdevice(dev);
+#endif
 	list_del(&priv->list);
 	up_write(&ppriv->vlan_rwsem);
 }
