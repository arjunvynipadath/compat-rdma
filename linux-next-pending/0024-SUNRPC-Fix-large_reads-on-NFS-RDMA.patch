commit 2b7bbc963da8d076f263574af4138b5df2e1581f
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Wed Mar 12 12:51:30 2014 -0400

    SUNRPC: Fix large reads on NFS/RDMA
    
    After commit a11a2bf4, "SUNRPC: Optimise away unnecessary data moves
    in xdr_align_pages", Thu Aug 2 13:21:43 2012, READs larger than a
    few hundred bytes via NFS/RDMA no longer work.  This commit exposed
    a long-standing bug in rpcrdma_inline_fixup().
    
    I reproduce this with an rsize=4096 mount using the cthon04 basic
    tests.  Test 5 fails with an EIO error.
    
    For my reproducer, kernel log shows:
    
      NFS: server cheating in read reply: count 4096 > recvd 0
    
    rpcrdma_inline_fixup() is zeroing the xdr_stream::page_len field,
    and xdr_align_pages() is now returning that value to the READ XDR
    decoder function.
    
    That field is set up by xdr_inline_pages() by the READ XDR encoder
    function.  As far as I can tell, it is supposed to be left alone
    after that, as it describes the dimensions of the reply xdr_stream,
    not the contents of that stream.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=68391
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>

diff --git a/net/sunrpc/xprtrdma/rpc_rdma.c b/net/sunrpc/xprtrdma/rpc_rdma.c
index e03725b..96ead52 100644
--- a/net/sunrpc/xprtrdma/rpc_rdma.c
+++ b/net/sunrpc/xprtrdma/rpc_rdma.c
@@ -649,9 +649,7 @@ rpcrdma_inline_fixup(struct rpc_rqst *rqst, char *srcp, int copy_len, int pad)
 				break;
 			page_base = 0;
 		}
-		rqst->rq_rcv_buf.page_len = olen - copy_len;
-	} else
-		rqst->rq_rcv_buf.page_len = 0;
+	}
 
 	if (copy_len && rqst->rq_rcv_buf.tail[0].iov_len) {
 		curlen = copy_len;
